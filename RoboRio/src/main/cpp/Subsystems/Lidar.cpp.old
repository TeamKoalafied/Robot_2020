#include <frc/I2C.h>
#include <frc/Timer.h>

#include "Lidar.h"

Lidar::Lidar(){

}

Lidar::~Lidar() {
    Shutdown();
}

void Lidar::Setup() {
    I2CBus = new frc::I2C(frc::I2C::kMXP, Lidar::ADDRESS_DEFAULT);
}

void Lidar::Shutdown() {
    std::cout << "Lidar::Shutdown()\n";
}

void Lidar::Periodic(bool show_dashboard)
{a
    
}

bool Lidar::IsBusy(){
    unsigned char Status[Lidar::READ_1_REGISTER];
    unsigned char statusRegister[Lidar::WRITE_1_REGISTER];
    statusRegister[Lidar::WRITE_1_REGISTER-1] = Lidar::STATUS;

    /**********read status**********/
    if ( I2CBus->WriteBulk(statusRegister, Lidar::WRITE_1_REGISTER)) {printf ( "WriteBulk status failed! line %d\n", __LINE__ ); return true;}
    if ( I2CBus->ReadOnly(Lidar::READ_1_REGISTER, Status) ) {printf ( "ReadOnly status failed! line %d\n", __LINE__ ); return true;}
    //printf("Status at line %d %0x, bit0=%0x\n", __LINE__, Status[0], Status[0] & (unsigned char)0x01);
    return (Status[0] & (unsigned char)0x01); // bit 0 is LIDAR Lite v2 busy bit
}

void Lidar::AcquireDistance(frc::Timer* m_timer){
    unsigned char distance[Lidar::READ_1_REGISTER];
	unsigned char distanceRegister_1st[Lidar::WRITE_1_REGISTER];
	distanceRegister_1st[Lidar::WRITE_1_REGISTER-1] = Lidar::DISTANCE_1_2;

	do{Wait(.0001);} while (Busy());

	/***********acquire distance**********/		//	WriteBulk() also works
	if ( I2CBus->Write(Lidar::COMMAND, Lidar::ACQUIRE_DC_CORRECT) )printf ( "Write operation failed! line %d\n", __LINE__ ); // initiate distance acquisition with DC stabilization

	do{Wait(.0001);} while (Busy());

	/**********read distance**********/     // Read() does not work
	if ( I2CBus->WriteBulk(distanceRegister_1st, Lidar::WRITE_1_REGISTER)) printf ( "WriteBulk distance failed! line %d\n", __LINE__ );
	else
	if ( I2CBus->ReadOnly(Lidar::READ_1_REGISTER, distance)) printf ( "ReadOnly distance failed! line %d\n", __LINE__ );

	unsigned int dist = (unsigned int)(distance[0]<<8) + (unsigned int)(distance[1]);

}